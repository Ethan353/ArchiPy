---
description:
globs:
alwaysApply: true
---
# General Guidelines
Automatic Fixes: Apply fixes for supported Ruff rules as specified in the pyproject.toml.
Line Length: Keep lines under 88 characters to comply with Black ( Ruff ignores E501).
Quotes: Prefer double quotes for strings to align with Black ( Ruff ignores Q000).
Docstrings: Include docstrings for public modules, packages, and __init__ methods only when explicitly required ( Ruff ignores D100, D104, D107).

# Linting Rules to Enforce
Flake8-Builtins (A):
 - Avoid shadowing Python builtins (e.g., don't use list as a variable name).
Flake8-Annotations (ANN):
 - Include type annotations for function arguments and return types, except for *args (ANN002), **kwargs (ANN003), self (ANN101), and cls (ANN102).
Flake8-Async (ASYNC):
 - Follow best practices for async code (e.g., avoid blocking calls in async functions).
Flake8-Bugbear (B):
 - Avoid common pitfalls (e.g., mutable default arguments).
Flake8-Blind-Except (BLE):
 - Avoid catching blind Exception ( Ruff ignores BLE001).
Pydocstyle (D):
 - Follow pydocstyle conventions for docstrings, except for ignored rules (D100, D104, D107).
Pycodestyle (E, W):
 - Adhere to PEP 8 style guidelines, except for line length (E501).
Eradicate (ERA):
 - Remove commented-out code.
Pyflakes (F):
 - Avoid unused imports, variables, or unreachable code, except for redefinition of unused functions (F811).
Flake8-Logging-Format (G):
 - Use proper logging methods, but allow f-strings in logging (G004).
Isort (I):
 - Organize imports according to isort rules.
Flake8-Import-Conventions (ICN):
 - Follow import naming conventions (e.g., import pandas as pd).
Ruff-Specific Rules (RUF):
 - Follow Ruff-specific best practices, but ignore ambiguous character rules (RUF001, RUF003).
Flake8-Bandit (S):
 - Avoid security issues, but allow assert statements (S101) and pickle usage (S301, S403).
Flake8-Debugger (T10):
 - Remove debugger statements (e.g., breakpoint()).
Flake8-Print (T20):
 - Avoid print statements in production code.
Tryceratops (TRY):
  -Follow exception handling best practices, but ignore long exception messages outside the class (TRY003) and abstracting raises into functions (TRY301).
Pyupgrade (UP):
 - Use modern Python syntax (e.g., f-strings over .format()).
